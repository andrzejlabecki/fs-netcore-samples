
@inject NavigationManager NavManager
@inject ApplicationStateProvider StateProvider

@code {
    [Parameter]
    public InitialApplicationState InitialState { get; set; }

    protected override Task OnInitializedAsync()
    {
        StateProvider.AccessToken = InitialState.AccessToken;

        return base.OnInitializedAsync();
    }
}
<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                @{ // part 2: add this
                    //NavManager.NavigateTo("/Logout", true);
                    NavManager.NavigateTo($"/Logout?returnUrl={Uri.EscapeDataString(NavManager.Uri)}", true);
                }
            </NotAuthorized>
            <Authorizing>
                <h1>Authentication in progress</h1>
                <p>Only visible while authentication is in progress.</p>
            </Authorizing>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>
