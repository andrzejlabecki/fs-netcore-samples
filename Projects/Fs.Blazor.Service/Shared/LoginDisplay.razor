@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <a href="Identity/Account/Manage">Hello, @Username!</a>
        <a href="#" @onclick="SignOut">Log out</a>
        @code
        {
            private string Username = "";

            protected override async Task OnInitializedAsync()
            {
                var state = await AuthState.GetAuthenticationStateAsync();

                if (state.User.Identity.IsAuthenticated)
                {
                    Username =
                        state.User.Claims
                        .Where(c => c.Type.Equals("name"))
                        .Select(c => c.Value)
                        .FirstOrDefault() ?? string.Empty;
                }

                await base.OnInitializedAsync();
            }

            private void SignOut()
            {
                Fs.Data.Models.AppContext appContext = Fs.Data.Models.AppContext.Instance;

                string returnUrl = String.Format("{0}{1}", appContext.RedirectUri, appContext.SignOutCallbackPath);

                NavManager.NavigateTo($"{appContext.SignOutUri}?returnUrl={Uri.EscapeDataString(returnUrl)}", true);
            }
        }

    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="#" @onclick="SignIn">Log in</a>
        @code {
            private void SignIn()
            {
                NavManager.NavigateTo($"{Fs.Data.Models.AppContext.Instance.SignInUri}?returnUrl={Uri.EscapeDataString(NavManager.Uri)}", true);
            }
        }
    </NotAuthorized>
</AuthorizeView>
