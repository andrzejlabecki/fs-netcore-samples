@page "/orders"
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthState

<AuthorizeView>
    <Authorized>
        @using Fs.Models;
        @using Fs.Client.Services;
        @inject OrderService OrderService
        @inject ApplicationStateProvider StateProvider

        <h1>Orders</h1>

        <p>This component demonstrates fetching data from web API.</p>

        @if (orders == null)
        {
            <p><em>@message</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.OrderId.ToString()</td>
                            <td>@order.Name.ToString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @code {
            private Order[] orders;
            private string message = "Starting...";

            protected override async Task OnInitializedAsync()
            {
                var state = await AuthState.GetAuthenticationStateAsync();

                if (state.User.Identity.IsAuthenticated)
                {
                    if (StateProvider.AccessToken != null)
                    {
                        message = "Loading...";
                        OrderService.AccessToken = StateProvider.AccessToken;
                        orders = await OrderService.GetOrdersAsync();
                    }
                    else
                        message = "Looking for authorization token...";
                }

                await base.OnInitializedAsync();
            }
        }
    </Authorized>
    <NotAuthorized>
        @{
            Fs.Data.Models.AppContext appContext = Fs.Data.Models.AppContext.Instance;
            Fs.Data.Models.SchemeContext schemeContext = appContext.AuthSchemes[0];

            NavManager.NavigateTo($"{schemeContext.SignInUri}?returnUrl={Uri.EscapeDataString(NavManager.Uri)}", true);
        }
    </NotAuthorized>
</AuthorizeView>





